generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id       String @id
  name     String
  email    String @unique
  password String
  roleCode String @map("role_code")

  role Role @relation(fields: [roleCode], references: [code], onDelete: Restrict)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("accounts")
}

model Role {
  id   String @id
  code String @unique

  accounts Account[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("roles")
}

model Unit {
  id            String @id
  name          String
  chaptersCount Int    @map("chapters_count")

  chapters Chapter[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("units")
}

model Chapter {
  id           String @id
  name         String
  description  String
  lessonsCount Int    @map("lessons_count")
  unitId       String @map("unit_id")

  unit    Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("chapters")
}

model MachineLearningModel {
  id          String @id
  name        String
  description String
  weightsKey  String @map("weights_key")
  modelKey    String @map("model_key")
  metadataKey String @map("metadata_key")

  lessons   LessonMachineLearningModel[]
  questions Question[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("machine_learning_models")
}

model Lesson {
  id           String @id
  name         String
  modulesCount Int    @map("modules_count")
  chapterId    String @map("chapter_id")

  modules               Module[]
  contents              Content[]
  questions             Question[]
  machineLearningModels LessonMachineLearningModel[]
  chapter               Chapter                      @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("lessons")
}

model LessonMachineLearningModel {
  lessonId               String @map("lesson_id")
  machineLearningModelId String @map("machine_learning_model_id")

  lesson               Lesson               @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  machineLearningModel MachineLearningModel @relation(fields: [machineLearningModelId], references: [id], onDelete: Cascade)

  @@id([lessonId, machineLearningModelId])
  @@map("lesson_machine_learning_model")
}

enum ModuleType {
  CONTENT
  QUESTION
}

model Module {
  id         String     @id
  lessonId   String     @map("lesson_id")
  contentId  String?    @unique @map("content_id")
  questionId String?    @unique @map("question_id")
  type       ModuleType

  content  Content?  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  lesson   Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("modules")
}

model Content {
  id          String @id
  name        String
  description String
  videoKey    String @map("video_key")
  lessonId    String @map("lesson_id")

  lesson Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  module Module?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("contents")
}

enum QuestionType {
  VIDEO
  SINGLE_CHOICE
}

model Question {
  id                     String       @id
  name                   String
  description            String
  videoKey               String?      @map("video_key")
  lessonId               String       @map("lesson_id")
  machineLearningModelId String?      @map("machine_learning_model_id")
  type                   QuestionType

  answers              Answer[]
  lesson               Lesson                @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  module               Module?
  machineLearningModel MachineLearningModel? @relation(fields: [machineLearningModelId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("questions")
}

model Answer {
  id          String  @id
  description String?
  videoKey    String? @map("video_key")
  isCorrect   Boolean @map("is_correct")
  questionId  String  @map("question_id")

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("answers")
}
