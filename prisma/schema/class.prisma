model Class {
  id          String  @id
  name        String
  description String
  bannerKey   String? @unique @map("banner_key")
  videoKey    String? @unique @map("video_key")
  courseId    String  @map("course_id")
  teacherId   String  @map("teacher_id")
  archived    Boolean @default(false)

  teacher  Account        @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  course   Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  students ClassStudent[]

  banner File? @relation(fields: [bannerKey], references: [fileKey], name: "class_banner_file", onDelete: SetNull)
  video  File? @relation(fields: [videoKey], references: [fileKey], name: "class_video_file", onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("classes")
}

enum ClassStudentStatus {
  ACCOMPLISHED
  AVAILABLE
  UNAVAILABLE

  @@map("class_student_status")
}

model ClassStudent {
  classId   String @map("class_id")
  studentId String @map("student_id")

  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  student Account @relation(fields: [studentId], references: [id], onDelete: Cascade)

  status ClassStudentStatus

  startedAt   DateTime @default(now()) @map("started_at")
  completedAt DateTime @default(now()) @map("completed_at")

  @@id([classId, studentId])
  @@map("classes_students")
}
