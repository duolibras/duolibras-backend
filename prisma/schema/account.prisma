model Account {
  id       String @id
  name     String
  email    String @unique
  password String
  roleCode String @map("role_code")

  role Role @relation(fields: [roleCode], references: [code], onDelete: Restrict)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  paymentDetails           AccountPaymentDetails?
  unitUserJourneyStatus    UnitUserJourneyStatus[]
  lessonUserJourneyStatus  LessonUserJourneyStatus[]
  chapterUserJourneyStatus ChapterUserJourneyStatus[]
  coursesAuthor            Course[]
  coursesStudent           CourseStudent[]
  classesStudent           ClassStudent[]

  @@map("accounts")
}

model Role {
  id   String @id
  code String @unique

  accounts Account[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@index([code])
  @@map("roles")
}

enum AccountPaymentDetailsStatus {
  EXPIRED
  PENDING
  COMPLETED

  @@map("account_payment_details_status")
}

model AccountPaymentDetails {
  id              String                      @id
  accountId       String                      @unique @map("account_id")
  stripeAccountId String                      @unique @map("stripe_account_id")
  status          AccountPaymentDetailsStatus @default(PENDING)

  account Account @relation(fields: [accountId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")

  @@map("accounts_payment_details")
}
